[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "stLDA-C: A Topic Model for Short Texts",
    "section": "",
    "text": "Topic modeling in Natural Language Processing (NLP) is a technique used to discover hidden themes or topics within a collection of text documents. It’s an unsupervised machine learning technique, meaning it doesn’t require predefined tags or training data that’s been previously classified by humans. The main objective of topic modeling is to discover topics that are clusters of words expressed as a combination of strongly related words.\nOne popular algorithm for topic modeling is Latent Dirichlet Allocation (LDA). Topic modeling is used in various applications such as chatbots, autocorrection, speech recognition, language translation, social media monitoring, hiring and recruitment, email filtering, and more.\n\n\nLatent Dirichlet Allocation (LDA) is a generative probabilistic model for collections of discrete data such as text corpora. Documents are represented as random mixtures over latent topics, where each topic is characterized by a distribution over words. The topic proportions of a document are assumed to have a Dirichlet prior. The topic-specific word distributions also have a Dirichlet prior.\n\n\n\nLDA Diagram, credit:Think Infi\n\n\nLDA has these key assumptions: - Documents are represented as random mixtures over latent topics, where each topic is characterized by a distribution over words. - Documents are exchangeable. - Requirements for the data: - Each document must represent a mixture of topics. - Each word must be generated from a single topic.\n\n\n\n\nLDA is designed for long documents, but tweets are short.\nLDA assumes that each document is a mixture of topics, but tweets are often about a single topic.\nShort texts from social network platform has other characteristics that are not considered by LDA, such as users, hashtags, mentions, etc.\n\n\n\n\n\nMerge all short documents by the same users into a long document\nUse a single topic for each short document\n\nPer-shot-text LDA (aka. Twitter-LDA)\nDirichlet-Multinomial Mixture (DMM)\n\nLearn topics from longer documents (e.g., news articles) and apply them to short texts\nClassify shot texts utilizing neural networks\n\nThe word mover’s distance (WMD)\nWord embeddings\n\nClustering techniques\n\nHowever, while there are methods available for analyzing short-text documents, they do have some limitations. Specifically, these methods do not retain user information and co-occurrence of words within the same short texts. Additionally, they require a corpus of long text that is already compatible with the short-text documents, and relying on pre-trained word embeddings may not accurately reflect the specific vocabulary and semantic usage of words in the short texts."
  },
  {
    "objectID": "index.html#introduction-topic-modeling-and-lda",
    "href": "index.html#introduction-topic-modeling-and-lda",
    "title": "stLDA-C: A Topic Model for Short Texts",
    "section": "",
    "text": "Topic modeling in Natural Language Processing (NLP) is a technique used to discover hidden themes or topics within a collection of text documents. It’s an unsupervised machine learning technique, meaning it doesn’t require predefined tags or training data that’s been previously classified by humans. The main objective of topic modeling is to discover topics that are clusters of words expressed as a combination of strongly related words.\nOne popular algorithm for topic modeling is Latent Dirichlet Allocation (LDA). Topic modeling is used in various applications such as chatbots, autocorrection, speech recognition, language translation, social media monitoring, hiring and recruitment, email filtering, and more.\n\n\nLatent Dirichlet Allocation (LDA) is a generative probabilistic model for collections of discrete data such as text corpora. Documents are represented as random mixtures over latent topics, where each topic is characterized by a distribution over words. The topic proportions of a document are assumed to have a Dirichlet prior. The topic-specific word distributions also have a Dirichlet prior.\n\n\n\nLDA Diagram, credit:Think Infi\n\n\nLDA has these key assumptions: - Documents are represented as random mixtures over latent topics, where each topic is characterized by a distribution over words. - Documents are exchangeable. - Requirements for the data: - Each document must represent a mixture of topics. - Each word must be generated from a single topic.\n\n\n\n\nLDA is designed for long documents, but tweets are short.\nLDA assumes that each document is a mixture of topics, but tweets are often about a single topic.\nShort texts from social network platform has other characteristics that are not considered by LDA, such as users, hashtags, mentions, etc.\n\n\n\n\n\nMerge all short documents by the same users into a long document\nUse a single topic for each short document\n\nPer-shot-text LDA (aka. Twitter-LDA)\nDirichlet-Multinomial Mixture (DMM)\n\nLearn topics from longer documents (e.g., news articles) and apply them to short texts\nClassify shot texts utilizing neural networks\n\nThe word mover’s distance (WMD)\nWord embeddings\n\nClustering techniques\n\nHowever, while there are methods available for analyzing short-text documents, they do have some limitations. Specifically, these methods do not retain user information and co-occurrence of words within the same short texts. Additionally, they require a corpus of long text that is already compatible with the short-text documents, and relying on pre-trained word embeddings may not accurately reflect the specific vocabulary and semantic usage of words in the short texts."
  },
  {
    "objectID": "index.html#introducing-the-stlda-c-model",
    "href": "index.html#introducing-the-stlda-c-model",
    "title": "stLDA-C: A Topic Model for Short Texts",
    "section": "Introducing the stLDA-C Model",
    "text": "Introducing the stLDA-C Model\nThe stLDA-C model was proposed by Tierney et al. in their paper “Author Clustering and Topic Estimation for Short Texts.” This model particularly aims to improve topic estimation in brief documents, such as social media posts, and incorporates the grouping of authors for more effective analysis.\nstLDA features: - Short text LDA topic model with unsupervised clustering of authors of short documents - Fusing the clustering of both authors(users) and documents - Hierarchical model capalbe of sharing information at multiple levels leading to higher quality estimates of per-author topic distributions, per-cluster topic distribution centers, and author cluster assignments.\nThe stLDA-C model is specifically designed to handle the sparsity of words in short texts by considering the additional structure provided by user clusters and potentially by integrating external information or employing different priors that are more suitable for short texts.\nTo understand what’s new in the stLDA-C model, let’s first take a closer look at the traditional LDA model.\n\n\n\n\n\n\nTraditional LDA\n\n\n\n\n\n\n\nstLDA-C\n\n\n\n\n\nQuick summary of the traditional LDA notations:\nW: Word Z: Topic\nLDA Input: 1. M number of documents 2. Each of these documents have N number of words\nLDA Output: 1. K number of topics (cluster of words) 1. Φ distribution (document to topic distribution)\nCompared with the traditional LDA, the stLDA-C model adds a layer of user clustering and a layer of hierarchical topic distributions. From the diagram below, we can see that\nFrom the diagrams, we can see that the stLDA-C model introduced several changes and additions:\n\nThe model considers \\(G\\) clusters of users, where \\(G\\) is a hyperparameter.\n\\(G_u\\) represents the assignment of each user to a specific cluster, governed by the \\(\\phi\\) parameter.\n\\(\\alpha_g\\) is the vector parameter of a Dirichlet distribution over topics choices for users in cluster \\(g\\).\n\\(\\phi\\) represents the distribution over user clusters. It forms a prior for the user cluster assignments. In traditional LDA, there is no concept of user clusters, so this parameter \\(\\nu\\) is specific to stLDA. \\(\\phi\\) encodes the proportion of users in each group and forms a prior distribution for \\(Gu\\).\n\\(\\theta_u\\): Because the model assumes that each document (tweet) is generated by a single topic, the consideration for the document-topic distribution is replaced by user-topic distribution. Each user-specific topic distribution \\(\\theta_u\\) is a draw from \\(Dir(\\alpha_g)\\), where \\(g\\) is the cluster assignment of user \\(u\\).\n\\(Z_{ud}\\) is the topic of each tweet \\(d\\) by user \\(u\\). \\(Z_{ud}\\) is a single draw from \\(\\theta_u\\), and all words in tweet \\(ud\\) are sampled from the topic distribution over words, \\(\\beta_t\\), where \\(Z_{ud} = t\\).\n\nThe generative process of the stLDA-C model is as follows:\n\n\n\nGenerative process of the stLDA-C model\n\n\nVery intimidating, right? Let’s break it down.\n\n\n\nstLDA-C model workflow\n\n\nThree key takeaways from the stLDA model:\n\nUser Clustering: stLDA clusters users by topic preferences, enhancing the analysis of datasets where authorship is significant.\nHierarchical Topic Distributions: The model employs hierarchical priors for nuanced cluster-level and user-specific topic analysis.\nIntegrated Topic-User and Word Analysis: stLDA combines topic-user dynamics with word co-occurrence for comprehensive short text analysis."
  },
  {
    "objectID": "index.html#part-3-the-stlda-c-model-in-action-analyze-us-senators-tweets-from-a-single-day",
    "href": "index.html#part-3-the-stlda-c-model-in-action-analyze-us-senators-tweets-from-a-single-day",
    "title": "stLDA-C: A Topic Model for Short Texts",
    "section": "Part 3: The stLDA-C Model in Action: Analyze US Senators’ tweets from a single day",
    "text": "Part 3: The stLDA-C Model in Action: Analyze US Senators’ tweets from a single day\n\n3.1 Visualize the networks of tweets and users\n\n\nCode\n# Create the networks\ntweets_w &lt;- PrepText(tweets, groupvar = \"screen_name\", textvar = \"text\", node_type = \"words\", tokenizer = \"words\", pos = \"nouns\", remove_stop_words = TRUE, compound_nouns = TRUE)\ntweets_g &lt;- PrepText(tweets, groupvar = \"screen_name\", textvar = \"text\", node_type = \"groups\", tokenizer = \"words\", pos = \"nouns\", remove_stop_words = TRUE, compound_nouns = TRUE)\n\ntweets_w_nw &lt;- CreateTextnet(tweets_w)\ntweets_g_nw &lt;- CreateTextnet(tweets_g)\n\n# Save the networks to local files\nsaveRDS(tweets_w_nw, \"rcs/data/tweets_w_nw.rds\")\nsaveRDS(tweets_g_nw, \"rcs/data/tweets_g_nw.rds\")\n\n# # ## Check the distribution of degree of the nodes\n# degree &lt;- degree(tweets_w_nw)\n# hist(degree, breaks = 100, main = \"Degree Distribution of Words\", xlab = \"Degree\")\n# # \n# # ## Check number of nodes and edges\n# vcount(tweets_w_nw)\n\nVisTextNet(tweets_w_nw, alpha = 0.25, label_degree_cut=10, betweenness=FALSE)\n\n\n\n\n\nCode\nVisTextNet(tweets_g_nw, alpha = 0.25, label_degree_cut=0, betweenness=TRUE)\n\n\n\n\n\n\n\n3.2 Use stLDA-C to analyze US Senators’ tweets. (One day’s tweets from 20 US Senators, 10 tweets per person)\n\n\nCode\n#######################\n### Visualizations ####\n#######################\n\n#print top 5 words from each topic\ngroundtruth_estimate[[\"tw\"]] %&gt;% \n  top_topic_words(words = words,n=10) %&gt;% \n  t\n\n\n      [,1]     [,2]     [,3]       [,4]           [,5]       [,6]      \n [1,] \"court\"  \"help\"   \"campaign\" \"@brianschatz\" \"campaign\" \"campaign\"\n [2,] \"help\"   \"just\"   \"just\"     \"campaign\"     \"help\"     \"just\"    \n [3,] \"just\"   \"must\"   \"know\"     \"day\"          \"just\"     \"know\"    \n [4,] \"must\"   \"need\"   \"must\"     \"just\"         \"must\"     \"must\"    \n [5,] \"need\"   \"now\"    \"now\"      \"must\"         \"now\"      \"now\"     \n [6,] \"now\"    \"people\" \"people\"   \"now\"          \"people\"   \"people\"  \n [7,] \"people\" \"senate\" \"support\"  \"people\"       \"senate\"   \"thank\"   \n [8,] \"thank\"  \"thank\"  \"thank\"    \"thank\"        \"thank\"    \"trump\"   \n [9,] \"us\"     \"us\"     \"us\"       \"trump\"        \"us\"       \"us\"      \n[10,] \"vote\"   \"vote\"   \"vote\"     \"vote\"         \"vote\"     \"vote\"    \n\n\nCode\n#print cluster means with user-level topic estimates overlayed\n#grey bars are cluster-level expected values, colored lines are each user's topic distribution\n#note that clusters with 1 user do not visualize well\n\n# Extract estimated cluster assignments from the model results\nca_est &lt;- groundtruth_estimate[[\"ca\"]] %&gt;% results_freq_table() %&gt;% apply(1, which.max)\n\n# The following line is commented out because ca_true doesn't exist in your actual data scenario\n# table(ca_est, ca_true)\n\n# Function to plot clusters\nplot_clusters &lt;- function(ut_mat, cluster_assignment, cluster_alphas, yRange = c(0, .5)) {\n  cluster_means &lt;- cluster_alphas %&gt;% {./rowSums(.)}\n  ut_mat &lt;- ut_mat %&gt;% {./rowSums(.)}\n  \n  lapply(unique(cluster_assignment), function(c) {\n    ut_mat %&gt;%\n    {.[cluster_assignment == c, ]} %&gt;%\n      t %&gt;%\n      data.frame(Topic = 1:ncol(ut_mat), .) %&gt;%\n      reshape2::melt(id.vars = \"Topic\") %&gt;%\n      ggplot(aes(x = Topic, y = value)) +\n      geom_line(aes(color = variable)) +\n      guides(color = \"none\") +\n      geom_bar(data = data.frame(x = 1:ncol(ut_mat), y = cluster_means[c, ]), aes(x = x, y = y), alpha = .5, stat = \"identity\") +\n      labs(title = str_c(\"Cluster \", c, \" (n=\", sum(cluster_assignment == c), \")\"), y = \"Probability\") +\n      ylim(yRange)\n  })\n}\n\n# Generate and arrange cluster plots\nclusterPlots &lt;- plot_clusters(ut_mat = groundtruth_estimate[[\"ut\"]] %&gt;% results_array_mean(),\n                              cluster_assignment = groundtruth_estimate[[\"ca\"]] %&gt;% results_freq_table() %&gt;% apply(1, which.max),\n                              cluster_alphas = groundtruth_estimate[[\"alphag\"]] %&gt;% results_array_mean())\n\nclusterPlots %&gt;% gridExtra::grid.arrange(grobs = .)"
  },
  {
    "objectID": "index.html#see-more",
    "href": "index.html#see-more",
    "title": "stLDA-C: A Topic Model for Short Texts",
    "section": "See more:",
    "text": "See more:\n\nWhat is Topic Modeling? Definition, Uses, & Examples\nWhat is Topic Modeling? A Beginner’s Guide\nTopic Modeling: An Introduction - MonkeyLearn\nTopic Modelling | Topic Modelling in Natural Language Processing.\nA Beginner’s Guide to Latent Dirichlet Allocation(LDA)"
  }
]